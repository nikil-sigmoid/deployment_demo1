name: Deploy Arch/Containers Code Change

on:
  pull_request:
    types: [ closed ]


jobs:
  selectivecopy:
    if: github.event.pull_request.merged == true
    name: Selective Copy To Delta Folder
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0

      - name: Use Python 3.8.x
        uses: actions/setup-python@v2.2.1
        with:
          python-version: 3.8.x
          
          
      - id: selective_copy_arch    
        name: Select files to copy
        if: github.event.pull_request.merged == true
        env:
          TEMP_DIR_PATH: '$GITHUB_WORKSPACE/schemachange_delta/'
          FILTER_DIR: 'arch'
          PR_NUMBER: ${{ github.event.number }}
          BEARER_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          echo "github ref: $GITHUB_REF"
          echo "github ref name: $GITHUB_REF_NAME"
          echo "github sha: $GITHUB_SHA"
          echo "pr number: ${{ github.event.number }}"
          pip install schemachange
          python --version
          chmod u+x changed_files.sh
          ./changed_files.sh $GITHUB_WORKSPACE/schemachange_delta/ arch ${{ github.event.number }} ${{ secrets.GITHUB_TOKEN }}



      - id: selective_copy_containers   
        name: Select files to copy
        if: github.event.pull_request.merged == true
        env:
          TEMP_DIR_PATH: '$GITHUB_WORKSPACE/schemachange_delta/'
          FILTER_DIR: 'containers'
          PR_NUMBER: ${{ github.event.number }}
          BEARER_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          echo "github ref: $GITHUB_REF"
          echo "github ref name: $GITHUB_REF_NAME"
          echo "github sha: $GITHUB_SHA"
          echo "pr number: ${{ github.event.number }}"
          pip install schemachange
          python --version
          chmod u+x changed_files.sh
          ./changed_files.sh $GITHUB_WORKSPACE/schemachange_delta/ containers ${{ github.event.number }} ${{ secrets.GITHUB_TOKEN }}



      - name: Update required docker images
        if: github.event.pull_request.merged == true
        run: |
          echo 'yes changed'
          echo "${{ steps.selective_copy_arch.outputs.changed_files_list_string }}"
          
          my_str_arch="${{ steps.selective_copy_arch.outputs.changed_files_list_string }}"  
          echo "len files changed in arch: ${#my_str_arch}"
          my_arr_arch=($(echo $my_str_arch | tr ' ' '\n'))  
          for i in "${my_arr_arch[@]}"  
            do  
            echo $i  
          done  
          
          echo "Docker build will start here"
          
          if [[ "${#my_str_arch}" -ne 0 ]]
          then
              cd containers
              for dir in `ls -d */`; do
                echo $dir
                cd $dir
                docker build .
                echo `pwd`
                cd ..
                done
          else
            my_str_containers="${{ steps.selective_copy_containers.outputs.changed_files_list_string }}"  
            echo "len files changed in containers: ${#my_str_containers}"
            my_arr_containers=($(echo $my_str_containers | tr ' ' '\n'))
            if [[ "${#my_str_containers}" -ne 0 ]]
            then 
              echo `pwd`
              # cd containers
                # for dir in `ls -d */`; do
                #   echo $dir
                #   cd $dir
                #   docker build .
                #   echo `pwd`
                #   cd ..
                # done


                subdirs_list=()
                for dir in "${my_arr_containers[@]}"; do
                  subdirs_list+=(`echo $dir | awk -F/ '{print $2}'`)
                done
                
                unique_subdirs_list=($(for v in "${subdirs_list[@]}"; do echo "$v";done| sort| uniq| xargs))
                
                cd containers
                for dir in "${unique_subdirs_list[@]}"; do  
                  echo "changed file: $dir"
                  echo $dir 
                  cd $dir 
                  docker build .
                  echo `pwd`
                  cd ..
                done 


              else
                echo "All docker images are updated"
              fi
            fi
          
          echo "Docker build ends here"
          
          
          # for file_path in "${{ steps.selective_copy.outputs.changed_files_list_string }}"; do
          #   echo $file_path
          # done
          # echo "SF_ACCOUNT: ${{ steps.ci.outputs.SF_ACCOUNT}}.${{ steps.ci.outputs.SF_REGION}}"
          # echo "SF_ROLE: ${{ steps.ci.outputs.SF_ROLE}}"
          # echo "SF_WAREHOUSE: ${{ steps.ci.outputs.SF_WAREHOUSE}}"
          # echo "SF_ENV: ${{ steps.ci.outputs.PREFIX}}"
        
